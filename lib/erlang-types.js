'use strict';

class Tuple {

  constructor(...args) {
    this.values = Object.freeze(args);
    this.length = this.values.length;
  }

  get(index) {
    return this.values[index];
  }

  count() {
    return this.values.length;
  }

  [Symbol.iterator]() {
    return this.values[Symbol.iterator]();
  }

  toString() {
    var i,
        s = "";
    for (i = 0; i < this.values.length; i++) {
      if (s !== "") {
        s += ", ";
      }
      s += this.values[i].toString();
    }

    return "{" + s + "}";
  }

  put_elem(index, elem) {
    if (index === this.length) {
      let new_values = this.values.concat([elem]);
      return new Tuple(...new_values);
    }

    let new_values = this.values.concat([]);
    new_values.splice(index, 0, elem);
    return new Tuple(...new_values);
  }

  remove_elem(index) {
    let new_values = this.values.concat([]);
    new_values.splice(index, 1);
    return new Tuple(...new_values);
  }

}

let process_counter = -1;

class PID {
  constructor() {
    process_counter = process_counter + 1;
    this.id = process_counter;
  }

  toString() {
    return "PID#<0." + this.id + ".0>";
  }
}

let ref_counter = -1;

class Reference {
  constructor() {
    ref_counter = ref_counter + 1;
    this.id = ref_counter;
    this.ref = Symbol();
  }

  toString() {
    return "Ref#<0.0.0." + this.id + ">";
  }
}

class BitString {
  constructor(...args) {
    this.value = Object.freeze(this.process(args));
    this.length = this.value.length;
    this.bit_size = this.length * 8;
    this.byte_size = this.length;
  }

  get(index) {
    return this.value[index];
  }

  count() {
    return this.value.length;
  }

  slice(start, end = null) {
    let s = this.value.slice(start, end);
    let ms = s.map(elem => BitString.integer(elem));
    return new BitString(...ms);
  }

  [Symbol.iterator]() {
    return this.value[Symbol.iterator]();
  }

  toString() {
    var i,
        s = "";
    for (i = 0; i < this.count(); i++) {
      if (s !== "") {
        s += ", ";
      }
      s += this.get(i).toString();
    }

    return "<<" + s + ">>";
  }

  process(bitStringParts) {
    let processed_values = [];

    var i;
    for (i = 0; i < bitStringParts.length; i++) {
      let processed_value = this['process_' + bitStringParts[i].type](bitStringParts[i]);

      for (let attr of bitStringParts[i].attributes) {
        processed_value = this['process_' + attr](processed_value);
      }

      processed_values = processed_values.concat(processed_value);
    }

    return processed_values;
  }

  process_integer(value) {
    return value.value;
  }

  process_float(value) {
    if (value.size === 64) {
      return BitString.float64ToBytes(value.value);
    } else if (value.size === 32) {
      return BitString.float32ToBytes(value.value);
    }

    throw new Error('Invalid size for float');
  }

  process_bitstring(value) {
    return value.value.value;
  }

  process_binary(value) {
    return BitString.toUTF8Array(value.value);
  }

  process_utf8(value) {
    return BitString.toUTF8Array(value.value);
  }

  process_utf16(value) {
    return BitString.toUTF16Array(value.value);
  }

  process_utf32(value) {
    return BitString.toUTF32Array(value.value);
  }

  process_signed(value) {
    return new Uint8Array([value])[0];
  }

  process_unsigned(value) {
    return value;
  }

  process_native(value) {
    return value;
  }

  process_big(value) {
    return value;
  }

  process_little(value) {
    return value.reverse();
  }

  process_size(value) {
    return value;
  }

  process_unit(value) {
    return value;
  }

  static integer(value) {
    return BitString.wrap(value, { 'type': 'integer', 'unit': 1, 'size': 8 });
  }

  static float(value) {
    return BitString.wrap(value, { 'type': 'float', 'unit': 1, 'size': 64 });
  }

  static bitstring(value) {
    return BitString.wrap(value, { 'type': 'bitstring', 'unit': 1, 'size': value.bit_size });
  }

  static bits(value) {
    return BitString.bitstring(value);
  }

  static binary(value) {
    return BitString.wrap(value, { 'type': 'binary', 'unit': 8, 'size': value.length });
  }

  static bytes(value) {
    return BitString.binary(value);
  }

  static utf8(value) {
    return BitString.wrap(value, { 'type': 'utf8', 'unit': 1, 'size': value.length });
  }

  static utf16(value) {
    return BitString.wrap(value, { 'type': 'utf16', 'unit': 1, 'size': value.length * 2 });
  }

  static utf32(value) {
    return BitString.wrap(value, { 'type': 'utf32', 'unit': 1, 'size': value.length * 4 });
  }

  static signed(value) {
    return BitString.wrap(value, {}, 'signed');
  }

  static unsigned(value) {
    return BitString.wrap(value, {}, 'unsigned');
  }

  static native(value) {
    return BitString.wrap(value, {}, 'native');
  }

  static big(value) {
    return BitString.wrap(value, {}, 'big');
  }

  static little(value) {
    return BitString.wrap(value, {}, 'little');
  }

  static size(value, count) {
    return BitString.wrap(value, { 'size': count });
  }

  static unit(value, count) {
    return BitString.wrap(value, { 'unit': count });
  }

  static wrap(value, opt, new_attribute = null) {
    let the_value = value;

    if (!(value instanceof Object)) {
      the_value = { 'value': value, 'attributes': [] };
    }

    the_value = Object.assign(the_value, opt);

    if (new_attribute) {
      the_value.attributes.push(new_attribute);
    }

    return the_value;
  }

  static toUTF8Array(str) {
    var utf8 = [];
    for (var i = 0; i < str.length; i++) {
      var charcode = str.charCodeAt(i);
      if (charcode < 0x80) {
        utf8.push(charcode);
      } else if (charcode < 0x800) {
        utf8.push(0xc0 | charcode >> 6, 0x80 | charcode & 0x3f);
      } else if (charcode < 0xd800 || charcode >= 0xe000) {
        utf8.push(0xe0 | charcode >> 12, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
      }
      // surrogate pair
      else {
          i++;
          // UTF-16 encodes 0x10000-0x10FFFF by
          // subtracting 0x10000 and splitting the
          // 20 bits of 0x0-0xFFFFF into two halves
          charcode = 0x10000 + ((charcode & 0x3ff) << 10 | str.charCodeAt(i) & 0x3ff);
          utf8.push(0xf0 | charcode >> 18, 0x80 | charcode >> 12 & 0x3f, 0x80 | charcode >> 6 & 0x3f, 0x80 | charcode & 0x3f);
        }
    }
    return utf8;
  }

  static toUTF16Array(str) {
    var utf16 = [];
    for (var i = 0; i < str.length; i++) {
      var codePoint = str.codePointAt(i);

      if (codePoint <= 255) {
        utf16.push(0);
        utf16.push(codePoint);
      } else {
        utf16.push(codePoint >> 8 & 0xFF);
        utf16.push(codePoint & 0xFF);
      }
    }
    return utf16;
  }

  static toUTF32Array(str) {
    var utf32 = [];
    for (var i = 0; i < str.length; i++) {
      var codePoint = str.codePointAt(i);

      if (codePoint <= 255) {
        utf32.push(0);
        utf32.push(0);
        utf32.push(0);
        utf32.push(codePoint);
      } else {
        utf32.push(0);
        utf32.push(0);
        utf32.push(codePoint >> 8 & 0xFF);
        utf32.push(codePoint & 0xFF);
      }
    }
    return utf32;
  }

  //http://stackoverflow.com/questions/2003493/javascript-float-from-to-bits
  static float32ToBytes(f) {
    var bytes = [];

    var buf = new ArrayBuffer(4);
    new Float32Array(buf)[0] = f;

    let intVersion = new Uint32Array(buf)[0];

    bytes.push(intVersion >> 24 & 0xFF);
    bytes.push(intVersion >> 16 & 0xFF);
    bytes.push(intVersion >> 8 & 0xFF);
    bytes.push(intVersion & 0xFF);

    return bytes;
  }

  static float64ToBytes(f) {
    var bytes = [];

    var buf = new ArrayBuffer(8);
    new Float64Array(buf)[0] = f;

    var intVersion1 = new Uint32Array(buf)[0];
    var intVersion2 = new Uint32Array(buf)[1];

    bytes.push(intVersion2 >> 24 & 0xFF);
    bytes.push(intVersion2 >> 16 & 0xFF);
    bytes.push(intVersion2 >> 8 & 0xFF);
    bytes.push(intVersion2 & 0xFF);

    bytes.push(intVersion1 >> 24 & 0xFF);
    bytes.push(intVersion1 >> 16 & 0xFF);
    bytes.push(intVersion1 >> 8 & 0xFF);
    bytes.push(intVersion1 & 0xFF);

    return bytes;
  }
}

var index = {
  Tuple,
  PID,
  Reference,
  BitString
};

module.exports = index;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi4uL3NyYy9lcmxhbmctdHlwZXMvdHVwbGUuanMiLCIuLi9zcmMvZXJsYW5nLXR5cGVzL3BpZC5qcyIsIi4uL3NyYy9lcmxhbmctdHlwZXMvcmVmZXJlbmNlLmpzIiwiLi4vc3JjL2VybGFuZy10eXBlcy9iaXRfc3RyaW5nLmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFR1cGxlIHtcblxuICBjb25zdHJ1Y3RvciguLi5hcmdzKXtcbiAgICB0aGlzLnZhbHVlcyA9IE9iamVjdC5mcmVlemUoYXJncyk7XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLnZhbHVlcy5sZW5ndGg7XG4gIH1cblxuICBnZXQoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXNbaW5kZXhdO1xuICB9XG5cbiAgY291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVzLmxlbmd0aDtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLnZhbHVlc1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICB2YXIgaSwgcyA9IFwiXCI7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMudmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocyAhPT0gXCJcIikge1xuICAgICAgICBzICs9IFwiLCBcIjtcbiAgICAgIH1cbiAgICAgIHMgKz0gdGhpcy52YWx1ZXNbaV0udG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCJ7XCIgKyBzICsgXCJ9XCI7XG4gIH1cblxuICBwdXRfZWxlbShpbmRleCwgZWxlbSl7XG4gICAgaWYoaW5kZXggPT09IHRoaXMubGVuZ3RoKXtcbiAgICAgIGxldCBuZXdfdmFsdWVzID0gdGhpcy52YWx1ZXMuY29uY2F0KFtlbGVtXSk7XG4gICAgICByZXR1cm4gbmV3IFR1cGxlKC4uLm5ld192YWx1ZXMpO1xuICAgIH1cblxuICAgIGxldCBuZXdfdmFsdWVzID0gdGhpcy52YWx1ZXMuY29uY2F0KFtdKTtcbiAgICBuZXdfdmFsdWVzLnNwbGljZShpbmRleCwgMCwgZWxlbSk7XG4gICAgcmV0dXJuIG5ldyBUdXBsZSguLi5uZXdfdmFsdWVzKTtcbiAgfVxuXG4gIHJlbW92ZV9lbGVtKGluZGV4KXtcbiAgICBsZXQgbmV3X3ZhbHVlcyA9IHRoaXMudmFsdWVzLmNvbmNhdChbXSk7XG4gICAgbmV3X3ZhbHVlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIHJldHVybiBuZXcgVHVwbGUoLi4ubmV3X3ZhbHVlcyk7XG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBUdXBsZTtcbiIsImxldCBwcm9jZXNzX2NvdW50ZXIgPSAtMTtcblxuY2xhc3MgUElEIHtcbiAgY29uc3RydWN0b3IoKXtcbiAgICBwcm9jZXNzX2NvdW50ZXIgPSBwcm9jZXNzX2NvdW50ZXIgKyAxO1xuICAgIHRoaXMuaWQgPSBwcm9jZXNzX2NvdW50ZXI7XG4gIH1cblxuICB0b1N0cmluZygpe1xuICAgIHJldHVybiBcIlBJRCM8MC5cIiArIHRoaXMuaWQgKyBcIi4wPlwiO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBJRDtcbiIsImxldCByZWZfY291bnRlciA9IC0xO1xuXG5jbGFzcyBSZWZlcmVuY2Uge1xuICBjb25zdHJ1Y3Rvcigpe1xuICAgIHJlZl9jb3VudGVyID0gcmVmX2NvdW50ZXIgKyAxO1xuICAgIHRoaXMuaWQgPSByZWZfY291bnRlcjtcbiAgICB0aGlzLnJlZiA9IFN5bWJvbCgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKXtcbiAgICByZXR1cm4gXCJSZWYjPDAuMC4wLlwiICsgdGhpcy5pZCArIFwiPlwiO1xuICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgUmVmZXJlbmNlO1xuIiwiY2xhc3MgQml0U3RyaW5nIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncyl7XG4gICAgdGhpcy52YWx1ZSA9IE9iamVjdC5mcmVlemUodGhpcy5wcm9jZXNzKGFyZ3MpKTtcbiAgICB0aGlzLmxlbmd0aCA9IHRoaXMudmFsdWUubGVuZ3RoO1xuICAgIHRoaXMuYml0X3NpemUgPSB0aGlzLmxlbmd0aCAqIDg7XG4gICAgdGhpcy5ieXRlX3NpemUgPSB0aGlzLmxlbmd0aDtcbiAgfVxuXG4gIGdldChpbmRleCl7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVbaW5kZXhdO1xuICB9XG5cbiAgY291bnQoKXtcbiAgICByZXR1cm4gdGhpcy52YWx1ZS5sZW5ndGg7XG4gIH1cblxuICBzbGljZShzdGFydCwgZW5kID0gbnVsbCl7XG4gICAgbGV0IHMgPSB0aGlzLnZhbHVlLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIGxldCBtcyA9IHMubWFwKChlbGVtKSA9PiBCaXRTdHJpbmcuaW50ZWdlcihlbGVtKSk7XG4gICAgcmV0dXJuIG5ldyBCaXRTdHJpbmcoLi4ubXMpO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWVbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKXtcbiAgICB2YXIgaSwgcyA9IFwiXCI7XG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuY291bnQoKTsgaSsrKSB7XG4gICAgICBpZiAocyAhPT0gXCJcIikge1xuICAgICAgICBzICs9IFwiLCBcIjtcbiAgICAgIH1cbiAgICAgIHMgKz0gdGhpcy5nZXQoaSkudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gXCI8PFwiICsgcyArIFwiPj5cIjtcbiAgfVxuXG4gIHByb2Nlc3MoYml0U3RyaW5nUGFydHMpe1xuICAgIGxldCBwcm9jZXNzZWRfdmFsdWVzID0gW107XG5cbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgYml0U3RyaW5nUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwcm9jZXNzZWRfdmFsdWUgPSB0aGlzWydwcm9jZXNzXycgKyBiaXRTdHJpbmdQYXJ0c1tpXS50eXBlXShiaXRTdHJpbmdQYXJ0c1tpXSk7XG5cbiAgICAgIGZvcihsZXQgYXR0ciBvZiBiaXRTdHJpbmdQYXJ0c1tpXS5hdHRyaWJ1dGVzKXtcbiAgICAgICAgcHJvY2Vzc2VkX3ZhbHVlID0gdGhpc1sncHJvY2Vzc18nICsgYXR0cl0ocHJvY2Vzc2VkX3ZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcHJvY2Vzc2VkX3ZhbHVlcyA9IHByb2Nlc3NlZF92YWx1ZXMuY29uY2F0KHByb2Nlc3NlZF92YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb2Nlc3NlZF92YWx1ZXM7XG4gIH1cblxuICBwcm9jZXNzX2ludGVnZXIodmFsdWUpe1xuICAgIHJldHVybiB2YWx1ZS52YWx1ZTtcbiAgfVxuXG4gIHByb2Nlc3NfZmxvYXQodmFsdWUpe1xuICAgIGlmKHZhbHVlLnNpemUgPT09IDY0KXtcbiAgICAgIHJldHVybiBCaXRTdHJpbmcuZmxvYXQ2NFRvQnl0ZXModmFsdWUudmFsdWUpO1xuICAgIH1lbHNlIGlmKHZhbHVlLnNpemUgPT09IDMyKXtcbiAgICAgIHJldHVybiBCaXRTdHJpbmcuZmxvYXQzMlRvQnl0ZXModmFsdWUudmFsdWUpO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzaXplIGZvciBmbG9hdCcpO1xuICB9XG5cbiAgcHJvY2Vzc19iaXRzdHJpbmcodmFsdWUpe1xuICAgIHJldHVybiB2YWx1ZS52YWx1ZS52YWx1ZTtcbiAgfVxuXG4gIHByb2Nlc3NfYmluYXJ5KHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLnRvVVRGOEFycmF5KHZhbHVlLnZhbHVlKTtcbiAgfVxuXG4gIHByb2Nlc3NfdXRmOCh2YWx1ZSl7XG4gICAgcmV0dXJuIEJpdFN0cmluZy50b1VURjhBcnJheSh2YWx1ZS52YWx1ZSk7XG4gIH1cblxuICBwcm9jZXNzX3V0ZjE2KHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLnRvVVRGMTZBcnJheSh2YWx1ZS52YWx1ZSk7XG4gIH1cblxuICBwcm9jZXNzX3V0ZjMyKHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLnRvVVRGMzJBcnJheSh2YWx1ZS52YWx1ZSk7XG4gIH1cblxuICBwcm9jZXNzX3NpZ25lZCh2YWx1ZSl7XG4gICAgcmV0dXJuIChuZXcgVWludDhBcnJheShbdmFsdWVdKSlbMF07XG4gIH1cblxuICBwcm9jZXNzX3Vuc2lnbmVkKHZhbHVlKXtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwcm9jZXNzX25hdGl2ZSh2YWx1ZSl7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcHJvY2Vzc19iaWcodmFsdWUpe1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHByb2Nlc3NfbGl0dGxlKHZhbHVlKXtcbiAgICByZXR1cm4gdmFsdWUucmV2ZXJzZSgpO1xuICB9XG5cbiAgcHJvY2Vzc19zaXplKHZhbHVlKXtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBwcm9jZXNzX3VuaXQodmFsdWUpe1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHN0YXRpYyBpbnRlZ2VyKHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLndyYXAodmFsdWUsIHsgJ3R5cGUnOiAnaW50ZWdlcicsICd1bml0JzogMSwgJ3NpemUnOiA4IH0pO1xuICB9XG5cbiAgc3RhdGljIGZsb2F0KHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLndyYXAodmFsdWUsIHsgJ3R5cGUnOiAnZmxvYXQnLCAndW5pdCc6IDEsICdzaXplJzogNjQgfSk7XG4gIH1cblxuICBzdGF0aWMgYml0c3RyaW5nKHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLndyYXAodmFsdWUsIHsgJ3R5cGUnOiAnYml0c3RyaW5nJywgJ3VuaXQnOiAxLCAnc2l6ZSc6IHZhbHVlLmJpdF9zaXplIH0pO1xuICB9XG5cbiAgc3RhdGljIGJpdHModmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcuYml0c3RyaW5nKHZhbHVlKTtcbiAgfVxuXG4gIHN0YXRpYyBiaW5hcnkodmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcud3JhcCh2YWx1ZSwgeyAndHlwZSc6ICdiaW5hcnknLCAndW5pdCc6IDgsICdzaXplJzogdmFsdWUubGVuZ3RoIH0pO1xuICB9XG5cbiAgc3RhdGljIGJ5dGVzKHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLmJpbmFyeSh2YWx1ZSk7XG4gIH1cblxuICBzdGF0aWMgdXRmOCh2YWx1ZSl7XG4gICAgcmV0dXJuIEJpdFN0cmluZy53cmFwKHZhbHVlLCB7ICd0eXBlJzogJ3V0ZjgnLCAndW5pdCc6IDEsICdzaXplJzogdmFsdWUubGVuZ3RoICB9KTtcbiAgfVxuXG4gIHN0YXRpYyB1dGYxNih2YWx1ZSl7XG4gICAgcmV0dXJuIEJpdFN0cmluZy53cmFwKHZhbHVlLCB7ICd0eXBlJzogJ3V0ZjE2JywgJ3VuaXQnOiAxLCAnc2l6ZSc6IHZhbHVlLmxlbmd0aCAqIDIgfSk7XG4gIH1cblxuICBzdGF0aWMgdXRmMzIodmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcud3JhcCh2YWx1ZSwgeyAndHlwZSc6ICd1dGYzMicsICd1bml0JzogMSwgJ3NpemUnOiB2YWx1ZS5sZW5ndGggKiA0IH0pO1xuICB9XG5cbiAgc3RhdGljIHNpZ25lZCh2YWx1ZSl7XG4gICAgcmV0dXJuIEJpdFN0cmluZy53cmFwKHZhbHVlLCB7fSwgJ3NpZ25lZCcpO1xuICB9XG5cbiAgc3RhdGljIHVuc2lnbmVkKHZhbHVlKXtcbiAgICByZXR1cm4gQml0U3RyaW5nLndyYXAodmFsdWUsIHt9LCAndW5zaWduZWQnKTtcbiAgfVxuXG4gIHN0YXRpYyBuYXRpdmUodmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcud3JhcCh2YWx1ZSwge30sICduYXRpdmUnKTtcbiAgfVxuXG4gIHN0YXRpYyBiaWcodmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcud3JhcCh2YWx1ZSwge30sICdiaWcnKTtcbiAgfVxuXG4gIHN0YXRpYyBsaXR0bGUodmFsdWUpe1xuICAgIHJldHVybiBCaXRTdHJpbmcud3JhcCh2YWx1ZSwge30sICdsaXR0bGUnKTtcbiAgfVxuXG4gIHN0YXRpYyBzaXplKHZhbHVlLCBjb3VudCl7XG4gICAgcmV0dXJuIEJpdFN0cmluZy53cmFwKHZhbHVlLCB7J3NpemUnOiBjb3VudH0pO1xuICB9XG5cbiAgc3RhdGljIHVuaXQodmFsdWUsIGNvdW50KXtcbiAgICByZXR1cm4gQml0U3RyaW5nLndyYXAodmFsdWUsIHsndW5pdCc6IGNvdW50fSk7XG4gIH1cblxuICBzdGF0aWMgd3JhcCh2YWx1ZSwgb3B0LCBuZXdfYXR0cmlidXRlID0gbnVsbCl7XG4gICAgbGV0IHRoZV92YWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYoISh2YWx1ZSBpbnN0YW5jZW9mIE9iamVjdCkpe1xuICAgICAgdGhlX3ZhbHVlID0geyd2YWx1ZSc6IHZhbHVlLCAnYXR0cmlidXRlcyc6IFtdfTtcbiAgICB9XG5cbiAgICB0aGVfdmFsdWUgPSBPYmplY3QuYXNzaWduKHRoZV92YWx1ZSwgb3B0KTtcblxuICAgIGlmKG5ld19hdHRyaWJ1dGUpe1xuICAgICAgdGhlX3ZhbHVlLmF0dHJpYnV0ZXMucHVzaChuZXdfYXR0cmlidXRlKTtcbiAgICB9XG5cblxuICAgIHJldHVybiB0aGVfdmFsdWU7XG4gIH1cblxuICBzdGF0aWMgdG9VVEY4QXJyYXkoc3RyKSB7XG4gICAgdmFyIHV0ZjggPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoYXJjb2RlID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoY2hhcmNvZGUgPCAweDgwKXtcbiAgICAgICAgdXRmOC5wdXNoKGNoYXJjb2RlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGNoYXJjb2RlIDwgMHg4MDApIHtcbiAgICAgICAgdXRmOC5wdXNoKDB4YzAgfCAoY2hhcmNvZGUgPj4gNiksXG4gICAgICAgICAgICAgICAgICAweDgwIHwgKGNoYXJjb2RlICYgMHgzZikpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoY2hhcmNvZGUgPCAweGQ4MDAgfHwgY2hhcmNvZGUgPj0gMHhlMDAwKSB7XG4gICAgICAgIHV0ZjgucHVzaCgweGUwIHwgKGNoYXJjb2RlID4+IDEyKSxcbiAgICAgICAgICAgICAgICAgIDB4ODAgfCAoKGNoYXJjb2RlID4+IDYpICYgMHgzZiksXG4gICAgICAgICAgICAgICAgICAweDgwIHwgKGNoYXJjb2RlICYgMHgzZikpO1xuICAgICAgfVxuICAgICAgLy8gc3Vycm9nYXRlIHBhaXJcbiAgICAgIGVsc2Uge1xuICAgICAgICBpKys7XG4gICAgICAgIC8vIFVURi0xNiBlbmNvZGVzIDB4MTAwMDAtMHgxMEZGRkYgYnlcbiAgICAgICAgLy8gc3VidHJhY3RpbmcgMHgxMDAwMCBhbmQgc3BsaXR0aW5nIHRoZVxuICAgICAgICAvLyAyMCBiaXRzIG9mIDB4MC0weEZGRkZGIGludG8gdHdvIGhhbHZlc1xuICAgICAgICBjaGFyY29kZSA9IDB4MTAwMDAgKyAoKChjaGFyY29kZSAmIDB4M2ZmKSA8PCAxMClcbiAgICAgICAgICAgICAgICAgIHwgKHN0ci5jaGFyQ29kZUF0KGkpICYgMHgzZmYpKTtcbiAgICAgICAgdXRmOC5wdXNoKDB4ZjAgfCAoY2hhcmNvZGUgPj4gMTgpLFxuICAgICAgICAgICAgICAgICAgMHg4MCB8ICgoY2hhcmNvZGUgPj4gMTIpICYgMHgzZiksXG4gICAgICAgICAgICAgICAgICAweDgwIHwgKChjaGFyY29kZSA+PiA2KSAmIDB4M2YpLFxuICAgICAgICAgICAgICAgICAgMHg4MCB8IChjaGFyY29kZSAmIDB4M2YpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHV0Zjg7XG4gIH1cblxuICBzdGF0aWMgdG9VVEYxNkFycmF5KHN0cikge1xuICAgIHZhciB1dGYxNiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xuXG4gICAgICBpZihjb2RlUG9pbnQgPD0gMjU1KXtcbiAgICAgICAgdXRmMTYucHVzaCgwKTtcbiAgICAgICAgdXRmMTYucHVzaChjb2RlUG9pbnQpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHV0ZjE2LnB1c2goKChjb2RlUG9pbnQgPj4gOCkgJiAweEZGKSk7XG4gICAgICAgIHV0ZjE2LnB1c2goKGNvZGVQb2ludCAmIDB4RkYpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHV0ZjE2O1xuICB9XG5cblxuICBzdGF0aWMgdG9VVEYzMkFycmF5KHN0cikge1xuICAgIHZhciB1dGYzMiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xuXG4gICAgICBpZihjb2RlUG9pbnQgPD0gMjU1KXtcbiAgICAgICAgdXRmMzIucHVzaCgwKTtcbiAgICAgICAgdXRmMzIucHVzaCgwKTtcbiAgICAgICAgdXRmMzIucHVzaCgwKTtcbiAgICAgICAgdXRmMzIucHVzaChjb2RlUG9pbnQpO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHV0ZjMyLnB1c2goMCk7XG4gICAgICAgIHV0ZjMyLnB1c2goMCk7XG4gICAgICAgIHV0ZjMyLnB1c2goKChjb2RlUG9pbnQgPj4gOCkgJiAweEZGKSk7XG4gICAgICAgIHV0ZjMyLnB1c2goKGNvZGVQb2ludCAmIDB4RkYpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHV0ZjMyO1xuICB9XG5cbiAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIwMDM0OTMvamF2YXNjcmlwdC1mbG9hdC1mcm9tLXRvLWJpdHNcbiAgc3RhdGljIGZsb2F0MzJUb0J5dGVzKGYpIHtcbiAgICB2YXIgYnl0ZXMgPSBbXTtcblxuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoNCk7XG4gICAgKG5ldyBGbG9hdDMyQXJyYXkoYnVmKSlbMF0gPSBmO1xuXG4gICAgbGV0IGludFZlcnNpb24gPSAobmV3IFVpbnQzMkFycmF5KGJ1ZikpWzBdO1xuXG4gICAgYnl0ZXMucHVzaCgoKGludFZlcnNpb24gPj4gMjQpICYgMHhGRikpO1xuICAgIGJ5dGVzLnB1c2goKChpbnRWZXJzaW9uID4+IDE2KSAmIDB4RkYpKTtcbiAgICBieXRlcy5wdXNoKCgoaW50VmVyc2lvbiA+PiA4KSAmIDB4RkYpKTtcbiAgICBieXRlcy5wdXNoKChpbnRWZXJzaW9uICYgMHhGRikpO1xuXG4gICAgcmV0dXJuIGJ5dGVzO1xuICB9XG5cbiAgc3RhdGljIGZsb2F0NjRUb0J5dGVzKGYpIHtcbiAgICB2YXIgYnl0ZXMgPSBbXTtcblxuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoOCk7XG4gICAgKG5ldyBGbG9hdDY0QXJyYXkoYnVmKSlbMF0gPSBmO1xuXG4gICAgdmFyIGludFZlcnNpb24xID0gKG5ldyBVaW50MzJBcnJheShidWYpKVswXTtcbiAgICB2YXIgaW50VmVyc2lvbjIgPSAobmV3IFVpbnQzMkFycmF5KGJ1ZikpWzFdO1xuXG4gICAgYnl0ZXMucHVzaCgoKGludFZlcnNpb24yID4+IDI0KSAmIDB4RkYpKTtcbiAgICBieXRlcy5wdXNoKCgoaW50VmVyc2lvbjIgPj4gMTYpICYgMHhGRikpO1xuICAgIGJ5dGVzLnB1c2goKChpbnRWZXJzaW9uMiA+PiA4KSAmIDB4RkYpKTtcbiAgICBieXRlcy5wdXNoKChpbnRWZXJzaW9uMiAmIDB4RkYpKTtcblxuICAgIGJ5dGVzLnB1c2goKChpbnRWZXJzaW9uMSA+PiAyNCkgJiAweEZGKSk7XG4gICAgYnl0ZXMucHVzaCgoKGludFZlcnNpb24xID4+IDE2KSAmIDB4RkYpKTtcbiAgICBieXRlcy5wdXNoKCgoaW50VmVyc2lvbjEgPj4gOCkgJiAweEZGKSk7XG4gICAgYnl0ZXMucHVzaCgoaW50VmVyc2lvbjEgJiAweEZGKSk7XG5cbiAgICByZXR1cm4gYnl0ZXM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQml0U3RyaW5nO1xuIiwiaW1wb3J0IFR1cGxlIGZyb20gJy4vZXJsYW5nLXR5cGVzL3R1cGxlLmpzJztcbmltcG9ydCBQSUQgZnJvbSAnLi9lcmxhbmctdHlwZXMvcGlkLmpzJztcbmltcG9ydCBSZWZlcmVuY2UgZnJvbSAnLi9lcmxhbmctdHlwZXMvcmVmZXJlbmNlLmpzJztcbmltcG9ydCBCaXRTdHJpbmcgZnJvbSAnLi9lcmxhbmctdHlwZXMvYml0X3N0cmluZy5qcyc7XG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBUdXBsZSxcbiAgUElELFxuICBSZWZlcmVuY2UsXG4gIEJpdFN0cmluZ1xufTtcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLE1BQU0sS0FBTixDQUFZOztjQUVFLEdBQUcsSUFBZixFQUFvQjtTQUNiLE1BQUwsR0FBYyxPQUFPLE1BQVAsQ0FBYyxJQUFkLENBQWQ7U0FDSyxNQUFMLEdBQWMsS0FBSyxNQUFMLENBQVksTUFBMUI7OztNQUdFLEtBQUosRUFBVztXQUNGLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBUDs7O1VBR007V0FDQyxLQUFLLE1BQUwsQ0FBWSxNQUFuQjs7O0dBR0QsT0FBTyxRQUFSLElBQW9CO1dBQ1gsS0FBSyxNQUFMLENBQVksT0FBTyxRQUFuQixHQUFQOzs7YUFHUztRQUNMLENBQUo7UUFBTyxJQUFJLEVBQVg7U0FDSyxJQUFJLENBQVQsRUFBWSxJQUFJLEtBQUssTUFBTCxDQUFZLE1BQTVCLEVBQW9DLEdBQXBDLEVBQXlDO1VBQ25DLE1BQU0sRUFBVixFQUFjO2FBQ1AsSUFBTDs7V0FFRyxLQUFLLE1BQUwsQ0FBWSxDQUFaLEVBQWUsUUFBZixFQUFMOzs7V0FHSyxNQUFNLENBQU4sR0FBVSxHQUFqQjs7O1dBR08sS0FBVCxFQUFnQixJQUFoQixFQUFxQjtRQUNoQixVQUFVLEtBQUssTUFBbEIsRUFBeUI7VUFDbkIsYUFBYSxLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CLENBQUMsSUFBRCxDQUFuQixDQUFqQjthQUNPLElBQUksS0FBSixDQUFVLEdBQUcsVUFBYixD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